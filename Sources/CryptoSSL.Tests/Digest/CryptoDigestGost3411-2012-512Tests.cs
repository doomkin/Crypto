using System;
using System.IO;
using Crypto.Digest;
using CryptoSSL.Configurator;
using CryptoSSL.CryptoProvider;
using CryptoSSL.Tests.Helpers;
using NUnit.Framework;

namespace CryptoSSL.Tests.Digest
{
    [TestFixture]
    public class CryptoDigestGost3411_2012_512Tests
    {
        private static readonly CryptoFactory CryptoFactory = new CryptoFactory
            {
                Configurator = new OpenSslConfigurator
                    {
                        OpenSslCommand = TestHelper.GetTestFullDataPath(@"..\..\..\..\Additional\OpenSsl\Output\x64\bin\openssl.cmd"),
                        TempPath = Path.GetTempPath()
                    }
            };
        private ICryptoDigest _cryptoDigest;

        [SetUp]
        public void Init()
        {
            _cryptoDigest = CryptoFactory.CreateDigest(DigestAlgorithm.Gost2012_512);
        }

        [Test]
        public void DigestNullValTest()
        {
            Assert.That(() => _cryptoDigest.Digest(null), Throws.Exception.TypeOf<ArgumentNullException>());
        }

        [TestCase(new byte[0], new byte[] { 0x8e, 0x94, 0x5d, 0xa2, 0x09, 0xaa, 0x86, 0x9f, 0x04, 0x55, 0x92, 0x85, 0x29, 0xbc, 0xae, 0x46, 0x79, 0xe9, 0x87, 0x3a, 0xb7, 0x07, 0xb5, 0x53, 0x15, 0xf5, 0x6c, 0xeb, 0x98, 0xbe, 0xf0, 0xa7, 0x36, 0x2f, 0x71, 0x55, 0x28, 0x35, 0x6e, 0xe8, 0x3c, 0xda, 0x5f, 0x2a, 0xac, 0x4c, 0x6a, 0xd2, 0xba, 0x3a, 0x71, 0x5c, 0x1b, 0xcd, 0x81, 0xcb, 0x8e, 0x9f, 0x90, 0xbf, 0x4c, 0x1c, 0x1a, 0x8a }, TestName = "Empty")]
        [TestCase(new byte[] { 0x74, 0x65, 0x73, 0x74 }, new byte[] { 0x72, 0x00, 0xbf, 0x5d, 0xea, 0x56, 0x0f, 0x0d, 0x79, 0x60, 0xd0, 0x7f, 0xdc, 0x88, 0x74, 0xad, 0x9f, 0x3b, 0x86, 0xec, 0xe2, 0xe4, 0x5f, 0x55, 0x02, 0xae, 0x2e, 0x17, 0x6f, 0x2c, 0x92, 0x8e, 0x0e, 0x58, 0x11, 0x52, 0x28, 0x1f, 0x5a, 0xee, 0x81, 0x83, 0x18, 0xbe, 0xd7, 0xcb, 0xe6, 0xaa, 0x69, 0x99, 0x95, 0x89, 0x23, 0x47, 0x23, 0xce, 0xb3, 0x31, 0x75, 0x59, 0x83, 0x65, 0xb5, 0xc8 }, TestName = "test")]
        public void DigestTest(byte[] data, byte[] expected)
        {
            var digest = _cryptoDigest.Digest(data);

            Assert.IsNotNull(digest);
            Assert.AreEqual(64, digest.Length);
            Assert.AreEqual(expected, digest);
        }
    }
}
